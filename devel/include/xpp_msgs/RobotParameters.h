// Generated by gencpp from file xpp_msgs/RobotParameters.msg
// DO NOT EDIT!


#ifndef XPP_MSGS_MESSAGE_ROBOTPARAMETERS_H
#define XPP_MSGS_MESSAGE_ROBOTPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace xpp_msgs
{
template <class ContainerAllocator>
struct RobotParameters_
{
  typedef RobotParameters_<ContainerAllocator> Type;

  RobotParameters_()
    : ee_names()
    , nominal_ee_pos()
    , ee_max_dev()
    , base_mass(0.0)  {
    }
  RobotParameters_(const ContainerAllocator& _alloc)
    : ee_names(_alloc)
    , nominal_ee_pos(_alloc)
    , ee_max_dev(_alloc)
    , base_mass(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ee_names_type;
  _ee_names_type ee_names;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _nominal_ee_pos_type;
  _nominal_ee_pos_type nominal_ee_pos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ee_max_dev_type;
  _ee_max_dev_type ee_max_dev;

   typedef double _base_mass_type;
  _base_mass_type base_mass;





  typedef boost::shared_ptr< ::xpp_msgs::RobotParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xpp_msgs::RobotParameters_<ContainerAllocator> const> ConstPtr;

}; // struct RobotParameters_

typedef ::xpp_msgs::RobotParameters_<std::allocator<void> > RobotParameters;

typedef boost::shared_ptr< ::xpp_msgs::RobotParameters > RobotParametersPtr;
typedef boost::shared_ptr< ::xpp_msgs::RobotParameters const> RobotParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xpp_msgs::RobotParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xpp_msgs::RobotParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xpp_msgs::RobotParameters_<ContainerAllocator1> & lhs, const ::xpp_msgs::RobotParameters_<ContainerAllocator2> & rhs)
{
  return lhs.ee_names == rhs.ee_names &&
    lhs.nominal_ee_pos == rhs.nominal_ee_pos &&
    lhs.ee_max_dev == rhs.ee_max_dev &&
    lhs.base_mass == rhs.base_mass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xpp_msgs::RobotParameters_<ContainerAllocator1> & lhs, const ::xpp_msgs::RobotParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xpp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xpp_msgs::RobotParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xpp_msgs::RobotParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xpp_msgs::RobotParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93bb9137a8bf2b168102f89fd6a86853";
  }

  static const char* value(const ::xpp_msgs::RobotParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93bb9137a8bf2b16ULL;
  static const uint64_t static_value2 = 0x8102f89fd6a86853ULL;
};

template<class ContainerAllocator>
struct DataType< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xpp_msgs/RobotParameters";
  }

  static const char* value(const ::xpp_msgs::RobotParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Parameters used to generate this optimization/trajectory\n"
"# Should basically save class xpp::OptimizationParameters\n"
"\n"
"# endeffector names (order of endeffectors, e.g. LF, RF, LH, RH)\n"
"string[] ee_names  \n"
"\n"
"geometry_msgs/Point[]   nominal_ee_pos    # nominal position of each endeffector\n"
"geometry_msgs/Vector3   ee_max_dev        # the maximum distance the endeffector can deviate from the nominal position\n"
"\n"
"float64                 base_mass         # mass of the robot base (for plotting gravity force)             \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::xpp_msgs::RobotParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_names);
      stream.next(m.nominal_ee_pos);
      stream.next(m.ee_max_dev);
      stream.next(m.base_mass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xpp_msgs::RobotParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xpp_msgs::RobotParameters_<ContainerAllocator>& v)
  {
    s << indent << "ee_names[]" << std::endl;
    for (size_t i = 0; i < v.ee_names.size(); ++i)
    {
      s << indent << "  ee_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ee_names[i]);
    }
    s << indent << "nominal_ee_pos[]" << std::endl;
    for (size_t i = 0; i < v.nominal_ee_pos.size(); ++i)
    {
      s << indent << "  nominal_ee_pos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.nominal_ee_pos[i]);
    }
    s << indent << "ee_max_dev: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ee_max_dev);
    s << indent << "base_mass: ";
    Printer<double>::stream(s, indent + "  ", v.base_mass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XPP_MSGS_MESSAGE_ROBOTPARAMETERS_H
