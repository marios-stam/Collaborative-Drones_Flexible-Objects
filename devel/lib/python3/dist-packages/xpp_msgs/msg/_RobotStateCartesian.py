# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xpp_msgs/RobotStateCartesian.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import xpp_msgs.msg

class RobotStateCartesian(genpy.Message):
  _md5sum = "25955243f6c682a57bfe4fb411b854bb"
  _type = "xpp_msgs/RobotStateCartesian"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The state of a robot expressed in the Cartesian frame

duration                time_from_start   # global time along trajectory

# Position, velocity and acceleration of the base expressed in world frame
# The orientation quaternion maps base to world frame.
State6d                 base              # base pos/vel/acc in world

StateLin3d[]            ee_motion         # endeffector pos/vel/acc in world
geometry_msgs/Vector3[] ee_forces         # endeffector forces expressed in world
bool[]                  ee_contact        # True if the foot is touching the environment




================================================================================
MSG: xpp_msgs/State6d
# The state of the 6D base of a system

geometry_msgs/Pose     pose         # The 6D linear and angular position, orientation maps base to world
geometry_msgs/Twist    twist        # The 6D linear and angular velocity 
geometry_msgs/Accel    accel        # The 6D linear and angular acceleration
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: xpp_msgs/StateLin3d
# This contains the 3D representation of a linear state, including:
# position, velocity, acceleration

geometry_msgs/Point pos
geometry_msgs/Vector3 vel
geometry_msgs/Vector3 acc"""
  __slots__ = ['time_from_start','base','ee_motion','ee_forces','ee_contact']
  _slot_types = ['duration','xpp_msgs/State6d','xpp_msgs/StateLin3d[]','geometry_msgs/Vector3[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_from_start,base,ee_motion,ee_forces,ee_contact

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStateCartesian, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.base is None:
        self.base = xpp_msgs.msg.State6d()
      if self.ee_motion is None:
        self.ee_motion = []
      if self.ee_forces is None:
        self.ee_forces = []
      if self.ee_contact is None:
        self.ee_contact = []
    else:
      self.time_from_start = genpy.Duration()
      self.base = xpp_msgs.msg.State6d()
      self.ee_motion = []
      self.ee_forces = []
      self.ee_contact = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i19d().pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.base.pose.position.x, _x.base.pose.position.y, _x.base.pose.position.z, _x.base.pose.orientation.x, _x.base.pose.orientation.y, _x.base.pose.orientation.z, _x.base.pose.orientation.w, _x.base.twist.linear.x, _x.base.twist.linear.y, _x.base.twist.linear.z, _x.base.twist.angular.x, _x.base.twist.angular.y, _x.base.twist.angular.z, _x.base.accel.linear.x, _x.base.accel.linear.y, _x.base.accel.linear.z, _x.base.accel.angular.x, _x.base.accel.angular.y, _x.base.accel.angular.z))
      length = len(self.ee_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.ee_motion:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.vel
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.acc
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ee_forces)
      buff.write(_struct_I.pack(length))
      for val1 in self.ee_forces:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ee_contact)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.ee_contact))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.base is None:
        self.base = xpp_msgs.msg.State6d()
      if self.ee_motion is None:
        self.ee_motion = None
      if self.ee_forces is None:
        self.ee_forces = None
      end = 0
      _x = self
      start = end
      end += 160
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.base.pose.position.x, _x.base.pose.position.y, _x.base.pose.position.z, _x.base.pose.orientation.x, _x.base.pose.orientation.y, _x.base.pose.orientation.z, _x.base.pose.orientation.w, _x.base.twist.linear.x, _x.base.twist.linear.y, _x.base.twist.linear.z, _x.base.twist.angular.x, _x.base.twist.angular.y, _x.base.twist.angular.z, _x.base.accel.linear.x, _x.base.accel.linear.y, _x.base.accel.linear.z, _x.base.accel.angular.x, _x.base.accel.angular.y, _x.base.accel.angular.z,) = _get_struct_2i19d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ee_motion = []
      for i in range(0, length):
        val1 = xpp_msgs.msg.StateLin3d()
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v5 = val1.vel
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.acc
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ee_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ee_forces = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ee_forces.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_contact = s.unpack(str[start:end])
      self.ee_contact = list(map(bool, self.ee_contact))
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i19d().pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.base.pose.position.x, _x.base.pose.position.y, _x.base.pose.position.z, _x.base.pose.orientation.x, _x.base.pose.orientation.y, _x.base.pose.orientation.z, _x.base.pose.orientation.w, _x.base.twist.linear.x, _x.base.twist.linear.y, _x.base.twist.linear.z, _x.base.twist.angular.x, _x.base.twist.angular.y, _x.base.twist.angular.z, _x.base.accel.linear.x, _x.base.accel.linear.y, _x.base.accel.linear.z, _x.base.accel.angular.x, _x.base.accel.angular.y, _x.base.accel.angular.z))
      length = len(self.ee_motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.ee_motion:
        _v7 = val1.pos
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.vel
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.acc
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ee_forces)
      buff.write(_struct_I.pack(length))
      for val1 in self.ee_forces:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.ee_contact)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.ee_contact.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.base is None:
        self.base = xpp_msgs.msg.State6d()
      if self.ee_motion is None:
        self.ee_motion = None
      if self.ee_forces is None:
        self.ee_forces = None
      end = 0
      _x = self
      start = end
      end += 160
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.base.pose.position.x, _x.base.pose.position.y, _x.base.pose.position.z, _x.base.pose.orientation.x, _x.base.pose.orientation.y, _x.base.pose.orientation.z, _x.base.pose.orientation.w, _x.base.twist.linear.x, _x.base.twist.linear.y, _x.base.twist.linear.z, _x.base.twist.angular.x, _x.base.twist.angular.y, _x.base.twist.angular.z, _x.base.accel.linear.x, _x.base.accel.linear.y, _x.base.accel.linear.z, _x.base.accel.angular.x, _x.base.accel.angular.y, _x.base.accel.angular.z,) = _get_struct_2i19d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ee_motion = []
      for i in range(0, length):
        val1 = xpp_msgs.msg.StateLin3d()
        _v10 = val1.pos
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.vel
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.acc
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ee_motion.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ee_forces = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ee_forces.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ee_contact = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.ee_contact = list(map(bool, self.ee_contact))
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i19d = None
def _get_struct_2i19d():
    global _struct_2i19d
    if _struct_2i19d is None:
        _struct_2i19d = struct.Struct("<2i19d")
    return _struct_2i19d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
